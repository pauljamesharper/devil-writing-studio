
* Emacs Configuration (Literate Style)
  This is a literate Emacs configuration that tangles into four files:

  - early-init.el
  - init.el
  - modules/emacs-writing-studio.el
  - modules/ews.el

** Early Init Settings :early-init:
#+begin_src emacs-lisp :tangle early-init.el
;; early-init.el --- Early initialization for Emacs

(setq package-enable-at-startup nil)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-startup-screen t)
#+end_src

** Init File :init:
#+begin_src emacs-lisp :tangle init.el
  ;; init.el --- Main Emacs configuration entry point

  ;; Add modules directory to load path
  (add-to-list 'load-path (expand-file-name "modules" user-emacs-directory))

  ;; Load main configuration modules
  (require 'emacs-writing-studio)
  (require 'ews)
  (require 'shell)

  ;; Startup echo
  (message "Emacs initialized successfully.")
#+end_src

** Emacs Writing Studio Setup :emacs-writing-studio:
#+begin_src emacs-lisp :tangle modules/emacs-writing-studio.el
    ;;; emacs-writing-studio.el --- Main config for Emacs Writing Studio -*- lexical-binding: t; -*-

    ;; Author: Peter Prevos <peter@prevos.net>
    ;; URL: https://github.com/pprevos/emacs-writing-studio

    ;;; Commentary:
    ;; This file contains the core configuration for the Emacs Writing Studio.

    ;;; Code:

    ;;; init.el --- Emacs Writing Studio init -*- lexical-binding: t; -*-

    ;; Copyright (C) 2024-2025 Peter Prevos

    ;; Author: Peter Prevos <peter@prevos.net>
    ;; Maintainer: Peter Prevos <peter@prevos.net>
    ;; URL: https://github.com/pprevos/emacs-writing-studio/
    ;;
    ;; This file is NOT part of GNU Emacs.
    ;;
    ;; This program is free software; you can redistribute it and/or modify
    ;; it under the terms of the GNU General Public License as published by
    ;; the Free Software Foundation, either version 3 of the License, or
    ;; (at your option) any later version.
    ;;
    ;; This program is distributed in the hope that it will be useful,
    ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
    ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    ;; GNU General Public License for more details.
    ;;
    ;; You should have received a copy of the GNU General Public License
    ;; along with this program. If not, see <https://www.gnu.org/licenses/>.
    ;;
    ;; Emacs Writing Studio init file: https://lucidmanager.org/tags/emacs
    ;;
    ;; This init file is tangled from: documents/ews-book/99-appendix.org
    ;;
    ;; This file is a starter kit for developing a configuration and is not a package
    ;; that is regularly updated.
    ;;
    ;;; Code:

    ;; Emacs 29 or higher?

    (when (< emacs-major-version 29)
      (error "Emacs Writing Studio requires version 29 or later"))

    ;; Custom settings in a separate file and load the custom settings

    (setq-default custom-file (expand-file-name
    			     "custom.el"
    			     user-emacs-directory))

    (load custom-file :no-error-if-file-is-missing)

    ;; Bind key for customising variables

    (keymap-global-set "C-c w v" 'customize-variable)

    ;; Create a keymap for find-related commands
  (define-prefix-command 'my-find-map)

  ;; Bind it to a prefix key
  (global-set-key (kbd "C-c f") my-find-map)

  ;; Define just the configuration file binding
  (define-key my-find-map (kbd "c") 
    (lambda () (interactive) (find-file "~/.config/emacs/Emacs.org")))

  ;; Add which-key support for these bindings
  (with-eval-after-load 'which-key
    (which-key-add-key-based-replacements
      "C-c f" "Find"
      "C-c f c" "Edit emacs config"))


    ;; Set package archives

    (use-package package
      :config
      (add-to-list 'package-archives
                   '("melpa" . "https://melpa.org/packages/"))
      (package-initialize))

    ;; Package Management

    (use-package use-package
      :custom
      (use-package-always-ensure t)
      (package-native-compile t)
      (warning-minimum-level :emergency))

    ;; Load EWS functions

    (load-file (concat (file-name-as-directory user-emacs-directory)
    		   "ews.el"))

    ;; Check for missing external software

    (ews-missing-executables
     '(("gs" "mutool")
       "pdftotext"
       "soffice"
       "zip"
       "ddjvu"
       "curl"
       ("mpg321" "ogg123" "mplayer" "mpv" "vlc") 
       ("grep" "ripgrep")
       ("convert" "gm")
       "dvipng"
       "latex"
       "hunspell"
       "git"))

    ;;; LOOK AND FEEL

    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (setq inhibit-startup-screen t)

    ;; Short answers only please

    (setq-default use-short-answers t)

    ;; Scratch buffer settings

    (setq initial-major-mode 'org-mode
          initial-scratch-message "#+title: Scratch Buffer\n#+subtitle: Scratch Buffer\nThe text in this buffer is not saved when exiting Emacs.\n\n")

    ;; Spacious padding

    ;; (use-package spacious-padding
    ;;   :custom
    ;;   (line-spacing 3)
    ;;   (spacious-padding-mode 1))

    ;; Nerd Icons
    ;; This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
    (use-package nerd-icons
      :ensure t)

    (use-package nerd-icons-dired
      :ensure t
      :hook (dired-mode . nerd-icons-dired-mode))


    ;; Modus and EF Themes

    (use-package modus-themes
      :custom
      (modus-themes-italic-constructs t)
      (modus-themes-bold-constructs t)
      (modus-themes-mixed-fonts t)
      (modus-themes-to-toggle '(modus-operandi-tinted
                              modus-vivendi-tinted))
      :init
      ;; Load the dark theme (modus-vivendi-tinted) by default
      (load-theme 'modus-vivendi-tinted t)
      :bind
      (("C-c w t t" . modus-themes-toggle)
       ("C-c w t m" . modus-themes-select)
       ("C-c w t s" . consult-theme)))

    (use-package ef-themes)

    ;; Mixed-pich mode

    (use-package mixed-pitch
      :hook
      (org-mode . mixed-pitch-mode))

    ;; Window management
    ;; Split windows sensibly

    (setq split-width-threshold 120
          split-height-threshold nil)

    ;; Keep window sizes balanced

    (use-package balanced-windows
      :config
      (balanced-windows-mode))

    ;; MINIBUFFER COMPLETION

    ;; Enable vertico

    (use-package vertico
      :init
      (vertico-mode)
      :custom
      (vertico-sort-function 'vertico-sort-history-alpha))

    ;; Persist history over Emacs restarts.

    (use-package savehist
      :init
      (savehist-mode))

    ;; Search for partial matches in any order

    (use-package orderless
      :custom
      (completion-styles '(orderless basic))
      (completion-category-defaults nil)
      (completion-category-overrides
       '((file (styles partial-completion)))))

    ;; Enable richer annotations using the Marginalia package

    (use-package marginalia
      :init
      (marginalia-mode))

    ;; Improve keyboard shortcut discoverability
    (use-package which-key
      :config
      (setq which-key-popup-type 'side-window
            which-key-side-window-location 'bottom
            which-key-side-window-max-height 0.25
            which-key-max-description-length 40
            which-key-min-display-lines 3)

      (which-key-mode)
      ;; Add descriptive labels for writing prefixes
      (which-key-add-key-based-replacements
        "C-c w" "writing"
        ",w" "writing"
        "C-c w t" "toggle"
        ",w t" "toggle"
        "C-c w s" "spell"
        ",w s" "spell"
        "C-c w b" "bibliography"
        ",w b" "bibliography"
        "C-c w m" "multimedia"
        ",w m" "multimedia"
        "C-c w d" "denote"
        ",w d" "denote"
        "C-c w x" "explore"
        ",w x" "explore")
        
        
      :custom
      (which-key-max-description-length 40)
      (which-key-lighter nil)
      (which-key-sort-order 'which-key-description-order))

    ;; Contextual menu with right mouse button

    (when (display-graphic-p)
      (context-menu-mode))

    ;; Improved help buffers

    (use-package helpful
      :bind
      (("C-h f" . helpful-function)
       ("C-h x" . helpful-command)
       ("C-h k" . helpful-key)
       ("C-h v" . helpful-variable)))

    ;;; Text mode settings

    (use-package text-mode
      :ensure
      nil
      :hook
      (text-mode . visual-line-mode)
      :init
      (delete-selection-mode t)
      :custom
      (sentence-end-double-space nil)
      (scroll-error-top-bottom t)
      (save-interprogram-paste-before-kill t))

    ;; Check spelling with flyspell and hunspell

    (use-package flyspell
      :custom
      (ispell-program-name "hunspell")
      (ispell-dictionary ews-hunspell-dictionaries)
      (flyspell-mark-duplications-flag nil) ;; Writegood mode does this
      (org-fold-core-style 'overlays) ;; Fix Org mode bug
      :config
      (ispell-set-spellchecker-params)
      (ispell-hunspell-add-multi-dic ews-hunspell-dictionaries)
      :hook
      (text-mode . flyspell-mode)
      :bind
      (("C-c w s s" . ispell)
       ("C-;"       . flyspell-auto-correct-previous-word)))

    ;;; Ricing Org mode

    (use-package org
      :custom
      (org-startup-indented t)
      (org-hide-emphasis-markers t)
      (org-startup-with-inline-images t)
      (org-image-actual-width '(450))
      (org-fold-catch-invisible-edits 'error)
      (org-pretty-entities t)
      (org-use-sub-superscripts "{}")
      (org-id-link-to-org-use-id t)
      (org-fold-catch-invisible-edits 'show))

    ;; Show hidden emphasis markers

    (use-package org-appear
      :hook
      (org-mode . org-appear-mode))

    ;; LaTeX previews

    (use-package org-fragtog
      :after org
      :hook
      (org-mode . org-fragtog-mode)
      :custom
      (org-startup-with-latex-preview nil)
      (org-format-latex-options
       (plist-put org-format-latex-options :scale 2)
       (plist-put org-format-latex-options :foreground 'auto)
       (plist-put org-format-latex-options :background 'auto)))

    ;; Org modern: Most features are disabled for beginning users

    (use-package org-modern
      :hook
      (org-mode . org-modern-mode)
      :custom
      (org-modern-table nil)
      (org-modern-keyword nil)
      (org-modern-timestamp nil)
      (org-modern-priority nil)
      (org-modern-checkbox nil)
      (org-modern-tag nil)
      (org-modern-block-name nil)
      (org-modern-keyword nil)
      (org-modern-footnote nil)
      (org-modern-internal-target nil)
      (org-modern-radio-target nil)
      (org-modern-statistics nil)
      (org-modern-progress nil))

    ;; INSPIRATION

    ;; Doc-View

    (use-package doc-view
      :custom
      (doc-view-resolution 300)
      (large-file-warning-threshold (* 50 (expt 2 20))))

    ;; Read ePub files

    (use-package nov
      :init
      (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))

    ;; Managing Bibliographies

    (use-package bibtex
      :custom
      (bibtex-user-optional-fields
       '(("keywords" "Keywords to describe the entry" "")
         ("file"     "Relative or absolute path to attachments" "" )))
      (bibtex-align-at-equal-sign t)
      :config
      (ews-bibtex-register)
      :bind
      (("C-c w b r" . ews-bibtex-register)))

    ;; Biblio package for adding BibTeX records

    (use-package biblio
      :bind
      (("C-c w b b" . ews-bibtex-biblio-lookup)))

    ;; Citar to access bibliographies

    (use-package citar
      :defer t
      :custom
      (citar-bibliography ews-bibtex-files)
      :bind
      (("C-c w b o" . citar-open)))

    ;; Read RSS feeds with Elfeed

    (use-package elfeed
      :custom
      (elfeed-db-directory
       (expand-file-name "elfeed" user-emacs-directory))
      (elfeed-show-entry-switch 'display-buffer)
      :bind
      ("C-c w e" . elfeed))

    ;; Configure Elfeed with org mode
    (use-package elfeed-org
      :config
      (elfeed-org)
      :custom
      (rmh-elfeed-org-files
       (list (concat (file-name-as-directory (getenv "HOME"))
                     "Dropbox/Documents/elfeed.org"))))

    ;; Easy insertion of weblinks

    (use-package org-web-tools
      :bind
      (("C-c w w" . org-web-tools-insert-link-for-url)))


  ;;; EMMS - Emacs Multimedia System
(use-package emms
  :ensure t
  :init
  (require 'emms-setup)
  (emms-all)
  (require 'emms-player-mplayer)
  :config
  ;; Use mkv/mplayer as the default player
  (setq emms-player-list '(emms-player-mplayer)
        emms-player-mplayer-command-name "mkv" ;; change to "mplayer" if mkv fails
        emms-source-file-default-directory "~/Music/")

  ;; Optional: recursively add all audio/video in ~/Music
  (setq emms-source-file-directory-tree-function
        'emms-source-file-directory-tree-find)

  ;; Create a keymap for EMMS commands
  (define-prefix-command 'my-emms-map)
  (global-set-key (kbd "C-c m") 'my-emms-map)

  (define-key my-emms-map (kbd "f") 'emms-play-find)
  (define-key my-emms-map (kbd "d") 'emms-play-directory-tree)
  (define-key my-emms-map (kbd "s") 'emms-stop)
  (define-key my-emms-map (kbd "p") 'emms-pause)
  (define-key my-emms-map (kbd "n") 'emms-next)
  (define-key my-emms-map (kbd "b") 'emms-previous)
  (define-key my-emms-map (kbd "+") (lambda () (interactive) (emms-seek +10))) ;; seek forward
  (define-key my-emms-map (kbd "-") (lambda () (interactive) (emms-seek -10))) ;; seek backward

  ;; Playback speed control
  (define-key my-emms-map (kbd "<") (lambda () (interactive)
                                      (emms-player-mplayer-command "speed_mult 0.9")))
  (define-key my-emms-map (kbd ">") (lambda () (interactive)
                                      (emms-player-mplayer-command "speed_mult 1.1")))

  ;; Add which-key labels
  (with-eval-after-load 'which-key
    (which-key-add-key-based-replacements
      "C-c m" "Multimedia"
      "C-c m f" "Find file"
      "C-c m d" "Play dir"
      "C-c m s" "Stop"
      "C-c m p" "Pause"
      "C-c m n" "Next"
      "C-c m b" "Back"
      "C-c m +" "Seek +10s"
      "C-c m -" "Seek -10s"
      "C-c m <" "Slower"
      "C-c m >" "Faster")))


    (use-package openwith
      :config
      (openwith-mode t)
      :custom
      (openwith-associations nil))

    ;; Fleeting notes

    (use-package org
      :bind
      (("C-c c" . org-capture)
       ("C-c l" . org-store-link))
      :custom
      (org-goto-interface 'outline-path-completion)
      (org-capture-templates
       '(("f" "Fleeting note"
          item
          (file+headline org-default-notes-file "Notes")
          "- %?")
         ("p" "Permanent note" plain
          (file denote-last-path)
          #'denote-org-capture
          :no-save t
          :immediate-finish nil
          :kill-buffer t
          :jump-to-captured t)
         ("t" "New task" entry
          (file+headline org-default-notes-file "Tasks")
          "* TODO %i%?"))))

    ;; Denote

    (use-package denote
      :defer t
      :custom
      (denote-sort-keywords t)
      (denote-link-description-function #'ews-denote-link-description-title-case)
      :hook
      (dired-mode . denote-dired-mode)
      :custom-face
      (denote-faces-link ((t (:slant italic))))
      :init
      (require 'denote-org-extras)
      :bind
      (("C-c w d b" . denote-find-backlink)
       ("C-c w d d" . denote-date)
       ("C-c w d l" . denote-find-link)
       ("C-c w d h" . denote-org-extras-link-to-heading)
       ("C-c w d i" . denote-link-or-create)
       ("C-c w d k" . denote-rename-file-keywords)
       ("C-c w d n" . denote)
       ("C-c w d r" . denote-rename-file)
       ("C-c w d R" . denote-rename-file-using-front-matter)))

    ;; Consult convenience functions

    (use-package consult
      :bind
      (("C-c w h" . consult-org-heading)
       ("C-c w g" . consult-grep))
      :config
      (add-to-list 'consult-preview-allowed-hooks 'visual-line-mode))

    ;; Consult-Notes for easy access to notes

    (use-package consult-notes
      :custom
      (consult-notes-denote-display-keywords-indicator "_")
      :bind
      (("C-c w d f" . consult-notes)
       ("C-c w d g" . consult-notes-search-in-all-notes))
      :init
      (consult-notes-denote-mode))

    ;; Citar-Denote to manage literature notes

    (use-package citar-denote
      :custom
      (citar-open-always-create-notes t)
      :init
      (citar-denote-mode)
      :bind
      (("C-c w b c" . citar-create-note)
       ("C-c w b n" . citar-denote-open-note)
       ("C-c w b x" . citar-denote-nocite)
       :map org-mode-map
       ("C-c w b k" . citar-denote-add-citekey)
       ("C-c w b K" . citar-denote-remove-citekey)
       ("C-c w b d" . citar-denote-dwim)
       ("C-c w b e" . citar-denote-open-reference-entry)))

    ;; Explore and manage your Denote collection

    (use-package denote-explore
      :bind
      (;; Statistics
       ("C-c w x c" . denote-explore-count-notes)
       ("C-c w x C" . denote-explore-count-keywords)
       ("C-c w x b" . denote-explore-barchart-keywords)
       ("C-c w x e" . denote-explore-barchart-filetypes)
       ;; Random walks
       ("C-c w x r" . denote-explore-random-note)
       ("C-c w x l" . denote-explore-random-link)
       ("C-c w x k" . denote-explore-random-keyword)
       ("C-c w x x" . denote-explore-random-regex)
       ;; Denote Janitor
       ("C-c w x d" . denote-explore-identify-duplicate-notes)
       ("C-c w x z" . denote-explore-zero-keywords)
       ("C-c w x s" . denote-explore-single-keywords)
       ("C-c w x o" . denote-explore-sort-keywords)
       ("C-c w x w" . denote-explore-rename-keyword)
       ;; Visualise denote
       ("C-c w x n" . denote-explore-network)
       ("C-c w x v" . denote-explore-network-regenerate)
       ("C-c w x D" . denote-explore-barchart-degree)))

    ;; Set some Org mode shortcuts

    (use-package org
      :bind
      (:map org-mode-map
            ("C-c w n" . ews-org-insert-notes-drawer)
            ("C-c w p" . ews-org-insert-screenshot)
            ("C-c w c" . ews-org-count-words)))

    ;; Distraction-free writing

    (use-package olivetti
      :demand t
      :bind
      (("C-c w o" . ews-olivetti)))

    ;; Undo Tree

    (use-package undo-tree
      :config
      (global-undo-tree-mode)
      :custom
      (undo-tree-auto-save-history nil)
      :bind
      (("C-c w u" . undo-tree-visualise)))

    ;; Export citations with Org Mode

    (require 'oc-natbib)
    (require 'oc-csl)

    (setq org-cite-global-bibliography ews-bibtex-files
          org-cite-insert-processor 'citar
          org-cite-follow-processor 'citar
          org-cite-activate-processor 'citar)

    ;; Lookup words in the online dictionary

    (use-package dictionary
      :custom
      (dictionary-server "dict.org")
      :bind
      (("C-c w s d" . dictionary-lookup-definition)))

    (use-package powerthesaurus
      :bind
      (("C-c w s p" . powerthesaurus-transient)))

    ;; Writegood-Mode for weasel words, passive writing and repeated word detection

    (use-package writegood-mode
      :bind
      (("C-c w s r" . writegood-reading-ease))
      :hook
      (text-mode . writegood-mode))

    ;; Titlecasing

    (use-package titlecase
      :bind
      (("C-c w s t" . titlecase-dwim)
       ("C-c w s c" . ews-org-headings-titlecase)))

    ;; Abbreviations

    (add-hook 'text-mode-hook 'abbrev-mode)

    ;; Lorem Ipsum generator

    (use-package lorem-ipsum
      :custom
      (lorem-ipsum-list-bullet "- ") ;; Org mode bullets
      :init
      (setq lorem-ipsum-sentence-separator
            (if sentence-end-double-space "  " " "))
      :bind
      (("C-c w s i" . lorem-ipsum-insert-paragraphs)))

    ;; ediff

    (use-package ediff
      :ensure nil
      :custom
      (ediff-keep-variants nil)
      (ediff-split-window-function 'split-window-horizontally)
      (ediff-window-setup-function 'ediff-setup-windows-plain))

    ;; Enable Other text modes

    ;; Fontain mode for writing scrits

    (use-package fountain-mode)

    ;; Markdown mode

    (use-package markdown-mode)

    ;; PUBLICATION

    ;; Generic Org Export Settings

    (use-package org
      :custom
      (org-export-with-drawers nil)
      (org-export-with-todo-keywords nil)
      (org-export-with-toc nil)
      (org-export-with-smart-quotes t)
      (org-export-date-timestamp-format "%e %B %Y"))

    ;; epub export

    (use-package ox-epub
      :demand t
      :init
      (require 'ox-org))

    ;; LaTeX PDF Export settings

    (use-package ox-latex
      :ensure nil
      :demand t
      :custom
      ;; Multiple LaTeX passes for bibliographies
      (org-latex-pdf-process
       '("pdflatex -interaction nonstopmode -output-directory %o %f"
         "bibtex %b"
         "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
         "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
      ;; Clean temporary files after export
      (org-latex-logfiles-extensions
       (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out"
               "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk"
               "blg" "brf" "fls" "entoc" "ps" "spl" "bbl"
               "tex" "bcf"))))

    ;; EWS paperback configuration

    (with-eval-after-load 'ox-latex
      (add-to-list
       'org-latex-classes
       '("ews"
         "\\documentclass[11pt, twoside, hidelinks]{memoir}
          \\setstocksize{9.25in}{7.5in}
          \\settrimmedsize{\\stockheight}{\\stockwidth}{*}
          \\setlrmarginsandblock{1.5in}{1in}{*} 
          \\setulmarginsandblock{1in}{1.5in}{*}
          \\checkandfixthelayout
          \\layout
          \\setcounter{tocdepth}{0}
          \\setsecnumdepth{subsection}
          \\renewcommand{\\baselinestretch}{1.2}
          \\setheadfoot{0.5in}{0.75in}
          \\setlength{\\footskip}{0.8in}
          \\chapterstyle{bianchi}
          \\renewcommand{\\beforechapskip}{-30pt}
          \\setsecheadstyle{\\normalfont \\raggedright \\textbf}
          \\setsubsecheadstyle{\\normalfont \\raggedright \\emph}
          \\setsubsubsecheadstyle{\\normalfont\\centering}
          \\pagestyle{myheadings}
          \\usepackage[font={small, it}]{caption}
          \\usepackage{ccicons}
          \\usepackage{ebgaramond}
          \\usepackage[authoryear]{natbib}
          \\bibliographystyle{apalike}
          \\usepackage{svg}
          \\hyphenation{mini-buffer}
          \\renewcommand{\\LaTeX}{LaTeX}
          \\renewcommand{\\TeX}{TeX}"
         ("\\chapter{%s}" . "\\chapter*{%s}")
         ("\\section{%s}" . "\\section*{%s}")
         ("\\subsection{%s}" . "\\subsection*{%s}")
         ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))

    ;;; ADMINISTRATION

    ;; Bind org agenda command and custom agenda

    (use-package org
      :custom
      (org-agenda-custom-commands
       '(("e" "Agenda, next actions and waiting"
          ((agenda "" ((org-agenda-overriding-header "Next three days:")
                       (org-agenda-span 3)
                       (org-agenda-start-on-weekday nil)))
           (todo "NEXT" ((org-agenda-overriding-header "Next Actions:")))
           (todo "WAIT" ((org-agenda-overriding-header "Waiting:")))))))
      :bind
      (("C-c a" . org-agenda)))

    ;; Khalel

    (use-package khalel
      :ensure t
      :after org
      :config
      (khalel-add-capture-template)
      (require 'khalel-icalendar))
    (setq khalel-khal-command "~/.local/bin/khal")
    (setq khalel-vdirsyncer-command "~/.local/bin/vdirsyncer")
    (setq khalel-capture-key "e")
    (setq org-directory "~/Dropbox/Documents/notes")
    (setq khalel-import-org-file (concat org-directory "/" "calendar.org"))
    (setq khalel-import-org-file-confirm-overwrite nil)
    (setq khalel-import-end-date "+90d")


    ;; FILE MANAGEMENT

    (use-package dired
      :ensure
      nil
      :commands
      (dired dired-jump)
      :custom
      (dired-listing-switches
       "-goah --group-directories-first --time-style=long-iso")
      (dired-dwim-target t)
      (delete-by-moving-to-trash t)
      :init
      (put 'dired-find-alternate-file 'disabled nil))

    ;; Hide or display hidden files

    (use-package dired
      :ensure nil
      :hook (dired-mode . dired-omit-mode)
      :bind (:map dired-mode-map
                  ( "."     . dired-omit-mode))
      :custom (dired-omit-files "^\\.[a-zA-Z0-9]+"))

    ;; Backup files

    (setq-default backup-directory-alist
                  `(("." . ,(expand-file-name "backups/" user-emacs-directory)))
                  version-control t
                  delete-old-versions t
                  create-lockfiles nil)

    ;; Recent files

    (use-package recentf
      :config
      (recentf-mode t)
      :custom
      (recentf-max-saved-items 50)
      :bind
      (("C-c w r" . recentf-open)))

    ;; Bookmarks

    (use-package bookmark
      :custom
      (bookmark-save-flag 1)
      :bind
      ("C-x r d" . bookmark-delete))

    ;; Image viewer

    (use-package emacs
      :custom
      (image-dired-external-viewer "gimp")
      :bind
      ((:map image-mode-map
             ("k" . image-kill-buffer)
             ("<right>" . image-next-file)
             ("<left>"  . image-previous-file))
       (:map dired-mode-map
             ("C-<return>" . image-dired-dired-display-external))))

    (use-package image-dired
      :bind
      (("C-c w I" . image-dired))
      (:map image-dired-thumbnail-mode-map
            ("C-<right>" . image-dired-display-next)
            ("C-<left>"  . image-dired-display-previous)))

    ;; ADVANCED UNDOCUMENTED EXPORT SETTINGS FOR EWS

    ;; Use GraphViz for flow diagrams
    ;; requires GraphViz software
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((dot . t))) ; this line activates GraophViz dot

    ;;; Devil Mode 
    ;; Fixed Devil Mode setup
    ;; Define the face first with proper inheritance
    (defface devil-repeat-highlighting
      '((t (:inherit highlight)))
      "Face for repeatable keys in devil-mode."
      :group 'devil)


    (run-with-idle-timer 1 nil (lambda ()
                                 (when (fboundp 'global-devil-mode)
                                   (global-devil-mode -1)
                                   (global-devil-mode 1))))

    ;; Now load devil mode
    (use-package devil
      :ensure t
      :vc (:url "https://github.com/fbrosda/devil"
           :branch "dev"
           :rev :newest)
      :custom
      (devil-exit-key ".")
      (devil-all-keys-repeatable t)
      (devil-highlight-repeatable t)
      (devil-which-key-support t)
      :config
      ;; Correct the advice function issue
      (advice-add 'devil--which-key-describe-keymap :around
                  (lambda (orig-fun &rest args)
                    (if (= (length args) 2)
                        (apply orig-fun args)
                      (message "Wrong number of arguments for which-key function"))))
      ;; Use a timer to ensure everything is loaded
      (run-with-idle-timer 2 nil (lambda ()
                                   (global-devil-mode 1)))
      ;; Ensure which-key replacements are set up correctly
      (with-eval-after-load 'which-key
        (which-key-add-key-based-replacements
          "C-c w" "writing"
          ",w" "writing"
          "C-c w t" "toggle"
          ",w t" "toggle"
          "C-c w s" "spell"
          ",w s" "spell"
          "C-c w b" "bibliography"
          ",w b" "bibliography"
          "C-c m" "multimedia"
          ",m" "multimedia"
          "C-c w d" "denote"
          ",w d" "denote"
          "C-c w x" "explore"
          ",w x" "explore")))

    ;; For blocks
    (setq org-structure-template-alist
            '(("s" . "src")
              ("e" . "src emacs-lisp")
              ("E" . "src emacs-lisp :results value code :lexical t")
              ("t" . "src emacs-lisp :tangle FILENAME")
              ("T" . "src emacs-lisp :tangle FILENAME :mkdirp yes")
              ("x" . "example")
              ("X" . "export")
              ("q" . "quote")))


    (provide 'emacs-writing-studio)
    ;;; emacs-writing-studio.el ends here
#+end_src

** EWS Utilities :ews:
#+begin_src emacs-lisp :tangle modules/ews.el
;;; ews.el --- Convenience functions for authors -*- lexical-binding: t; -*-

;; Author: Peter Prevos <peter@prevos.net>
;; URL: https://github.com/pprevos/emacs-writing-studio

;;; Commentary:
;; Utility functions to support writing workflows.

;;; Code:

;;; ews.el --- Convenience functions for authors  -*- lexical-binding: t; -*-

;; Copyright (C) 2025 Peter Prevos

;; Author: Peter Prevos <peter@prevos.net>
;; Maintainer: Peter Prevos <peter@prevos.net>
;; Created: 1 January 2024
;; Version: 1.0
;; Keywords: convenience
;; Homepage: https://lucidmanager.org/tags/emacs/
;; URL: https://github.com/pprevos/emacs-writing-studio

;; This file is NOT part of GNU Emacs.
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program. If not, see <https://www.gnu.org/licenses/>.
;;
;;; Commentary:
;;
;; Series of convenience functions for Emacs Writing Studio
;; https://lucidmanager.org/tags/emacs
;;
;;; Code:

;; Emacs Writing Studio Customisation

(defgroup ews ()
  "Emacs Writing Studio."
  :group 'files
  :link '(url-link :tag "Homepage" "https://lucidmanager.org/tags/emacs/"))

(defcustom ews-bibtex-directory
  (concat (file-name-as-directory (getenv "HOME")) "library")
  "Location of BibTeX files and attachments."
  :group 'ews
  :type 'directory)

(defcustom ews-denote-para-keywords
  '("projects" "areas" "resources" "archives")
  "List of keywords to use for implementing the PARA method with Denote."
  :group 'ews
  :type 'list)

(defcustom ews-hunspell-dictionaries "en_AU"
  "Comma-separated list of Hunspell dictionaries."
  :group 'ews
  :type 'list)

(defcustom ews-org-heading-level-capitalise nil
  "Minimum level of Org headings to be capitalised
Nil implies all levels are capitalised."
  :group 'ews
  :type  '(choice (const :tag "All headings" nil)
		  (integer :tag "Highest level" 1)))

;; Check for missing external software
;;;###autoload
(defun ews-missing-executables (prog-list)
  "Identify missing executables in PROG-LIST.
Sublists indicate that one of the entries is required."
  (let ((missing '()))
    (dolist (exec prog-list)
      (if (listp exec)
          (unless (cl-some #'executable-find exec)
            (push (format "(%s)" (mapconcat 'identity exec " or ")) missing))
        (unless (executable-find exec)
          (push exec missing))))
    (if missing
        (message "Missing executable files(s): %s"
                 (mapconcat 'identity missing ", "))
      (message "No missing executable files."))))

;;; BIBLIOGRAPHY
(defvar ews-bibtex-files
  (when (file-exists-p ews-bibtex-directory)
    (directory-files ews-bibtex-directory t "^[A-Z|a-z|0-9].+.bib$"))
  "List of BibTeX files. Use `ews-bibtex-register' to configure.")

;;;###autoload
(defun ews-bibtex-register ()
  "Register the contents of the `ews-bibtex-directory' with `ews-bibtex-files`.
Use when adding or removing a BibTeX file from or to `ews-bibtex-directory'."
  (interactive)
  (when (file-exists-p ews-bibtex-directory)
    (let ((bib-files (directory-files ews-bibtex-directory t
				      "^[A-Z|a-z|0-9].+.bib$")))
      (setq ews-bibtex-files bib-files
  	    org-cite-global-bibliography bib-files
	    citar-bibliography bib-files)))
  (message "Registered:\n%s" (mapconcat #'identity ews-bibtex-files "\n")))

(defun ews--bibtex-combined-biblio-lookup ()
  "Combines `biblio-lookup' and `biblio-doi-insert-bibtex'."
  (require 'biblio)
  (let* ((dbs (biblio--named-backends))
         (db-list (append dbs '(("DOI" . biblio-doi-backend))))
         (db-selected (biblio-completing-read-alist
                       "Backend:"
                       db-list)))
    (if (eq db-selected 'biblio-doi-backend)
        (let ((doi (read-string "DOI: ")))
          (biblio-doi-insert-bibtex doi))
      (biblio-lookup db-selected))))

;;;###autoload
(defun ews-bibtex-biblio-lookup ()
  "Insert Biblio search results into current buffer or select BibTeX file."
  (interactive)
  (if-let ((current-mode major-mode)
	   ews-bibtex-files
	   (bibfiles (length ews-bibtex-files))
	   (bibfile (cond ((eq bibfiles 1) (car ews-bibtex-files))
			  ((equal major-mode 'bibtex-mode)
			   (buffer-file-name))
			  (t (completing-read
			      "Select BibTeX file:" ews-bibtex-files)))))
      (progn (find-file bibfile)
	     (goto-char (point-max))
	     (ews--bibtex-combined-biblio-lookup)
	     (save-buffer))
    (message "No BibTeX file(s) defined.")))

;; Search for missing BibTeX attachments and filenames
(defun ews--bibtex-extract-attachments ()
  "Extract attachment file names from BibTeX files in `ews-bibtex-directory'."
  (ews-bibtex-register)
  (let ((attachments '()))
    (dolist (bibtex-file ews-bibtex-files)
      (with-temp-buffer
        (insert-file-contents bibtex-file)
        (goto-char (point-min))
        (while (re-search-forward "file.*=.*{\\([^}]+\\)}" nil t)
          (let ((file-paths (split-string (match-string 1)
                                          "[[:space:]]*;[[:space:]]*")))
            (dolist (file-path file-paths)
              (push (expand-file-name (string-trim file-path)
                                      ews-bibtex-directory)
                    attachments))))))
    attachments))

(defun ews--bibtex-extract-files ()
  "List files recursively in `ews-bibtex-directory', excluding `.bib' and `.csl'."
  (seq-remove (lambda (file)
                (or (string-suffix-p ".bib" file)
                    (string-suffix-p ".csl" file)))
              (mapcar 'expand-file-name
                      (directory-files-recursively ews-bibtex-directory ""))))

;;;###autoload
(defun ews-bibtex-missing-files ()
  "List BibTeX attachments not listed in a BibTeX file entry."
  (interactive)
  (let* ((files (ews--bibtex-extract-files))
         (attachments (ews--bibtex-extract-attachments))
         (missing (cl-remove-if
                   (lambda (f) (member f attachments)) files)))
    (message "%s files not registered in bibliography" (length missing))
    (dolist (file missing)
      (message file))))

;;;###autoload
(defun ews-bibtex-missing-attachments ()
  "List BibTeX file entries with missing attachment(s)."
  (interactive)
  (let* ((files (ews--bibtex-extract-files))
         (attachments (ews--bibtex-extract-attachments))
         (missing (cl-remove-if
                   (lambda (f) (member f files)) attachments)))
    (message "%s BibTeX files without matching attachment." (length missing))
    (dolist (file missing)
      (message file))))

;; Denote
;;;###autoload
(defun ews-denote-assign-para ()
  "Move your note to either Project, Area, Reource or Archive (PARA).
Configure the PARA names with `ews-denote-para-keywords'."
  (interactive)
  (if-let* ((file (buffer-file-name))
            ((denote-filename-is-note-p file))
            (all-keywords (string-split (denote-retrieve-filename-keywords file) "_"))
            (keywords (seq-remove (lambda (keyword)
                                    (member keyword ews-denote-para-keywords))
                                  all-keywords))
            (para (completing-read "Select category: " ews-denote-para-keywords))
            (new-keywords (push para keywords)))
      (denote-rename-file
       file
       (denote-retrieve-title-or-filename file (denote-filetype-heuristics file))
       new-keywords
       (denote-retrieve-filename-signature file))
    (message "Current buffer is not a Denote file.")))

;; Distraction-free writing
(defvar ews-olivetti-point nil
  "Stores the point position before enabling Olivetti mode.")

;;;###autoload
(defun ews-olivetti ()
  "Distraction-free writing environment enhancing Olivetti mode.

Stores the window configuration when enabling Olivetti mode.
Restores the previous configuration when existing Olivetti mode
and moves point to the last location."
  (interactive)
  (if olivetti-mode
      (progn
        (if (eq (length (window-list)) 1)
            (progn
              (jump-to-register 1)
              (goto-char ews-olivetti-point)))
        (olivetti-mode 0)
        (text-scale-set 0))
    (progn
      (setq ews-olivetti-point (point))
      (window-configuration-to-register 1)
      (delete-other-windows)
      (text-scale-set 1)
      (olivetti-mode t))))

;;;###autoload
(defun ews-org-insert-notes-drawer ()
  "Generate or open a NOTES drawer under the current heading.
If a drawer exists for this section, a new line is created at the end of the
current note."
  (interactive)
  (push-mark)
  (org-previous-visible-heading 1)
  (forward-line)
  (if (looking-at-p "^[ \t]*:NOTES:")
      (progn
        (org-fold-hide-drawer-toggle 'off)
        (re-search-forward "^[ \t]*:END:" nil t)
        (forward-line -1)
        (org-end-of-line)
        (org-return))
    (org-insert-drawer nil "NOTES"))
  (org-unlogged-message "Press <C-u C-SPACE> to return to the previous position."))

;;;###autoload
(defun ews-org-count-words ()
  "Add word count to each heading property drawer in an Org mode buffer."
  (interactive)
  (org-map-entries
   (lambda ()
     (let* ((start (point))
            (end (save-excursion (org-end-of-subtree)))
            (word-count (count-words start end)))
       (org-set-property "WORDCOUNT" (number-to-string word-count))))))

;;;###autoload
(defun ews-org-insert-screenshot ()
  "Take a screenshot with the maim program and insert as an Org mode link."
  (interactive)
  (let ((filename (read-file-name "Enter filename for screenshot: " default-directory)))
    (unless (string-equal "png" (file-name-extension filename))
      (setq filename (concat (file-name-sans-extension filename) ".png")))
    (call-process-shell-command (format "maim --select %s" filename))
    (insert (format "#+caption: %s\n" (read-from-minibuffer "Caption: ")))
    (insert (format "[[file:%s]]" filename))
    (org-redisplay-inline-images)))

;;;###autoload
(defun ews-org-headings-titlecase (&optional arg)
  "Cycle through all headings in an Org buffer and convert them to title case.
When used with universal argument (ARG) converts to sentence case.
Customise `titlecase-style' for styling."
  (interactive "P")
  (require 'titlecase)
  (let ((style (if arg 'sentence titlecase-style)))
    (message "Converting headings to '%s' style" style)
    (org-map-entries
     (lambda ()
       (let* ((heading (substring-no-properties (org-get-heading t t t t)))
	      (level (org-current-level))
	      (heading-lower (downcase heading))
              (new-heading (titlecase--string heading-lower style)))
	 (when (<= level (or ews-org-heading-level-capitalise 999))
	   (org-edit-headline new-heading)))))))

(defun ews-denote-link-description-title-case (file)
  "Return link description for FILE.

If the region is active, use it as the description.
The title is formatted with the `titlecase' package.

This function is useful as the value of `denote-link-description-function' to
generate links in titlecase for attachments."
  (require 'titlecase)
  (let* ((file-type (denote-filetype-heuristics file))
         (title (denote-retrieve-title-or-filename file file-type))
	 (clean-title (if (string-match-p " " title)
			  title
			(replace-regexp-in-string "\\([a-zA-Z0-9]\\)-\\([a-zA-Z0-9]\\)" "\\1 \\2" title)))
         (region-text (denote--get-active-region-content)))
    (cond
     (region-text region-text)
     (title (format "%s" (titlecase--string clean-title titlecase-style)))
     (t ""))))



(message "EWS module loaded.")
(provide 'ews)
;;; ews.el ends here
#+end_src

** Shell

#+begin_src emacs-lisp :tangle modules/shell.el
    ;; Vterm

    (use-package vterm
      :ensure t
      :config
    (setq shell-file-name "/bin/bash"
          vterm-max-scrollback 5000))


    ;; Vterm-Toggle

    ;; vterm-toggle toggles between the vterm buffer and whatever buffer you are editing.
    (use-package vterm-toggle
      :after vterm
      :config
      (setq vterm-toggle-fullscreen-p nil)
      (setq vterm-toggle-scope 'project)
      (add-to-list 'display-buffer-alist
                   '((lambda (buffer-or-name _)
                         (let ((buffer (get-buffer buffer-or-name)))
                           (with-current-buffer buffer
                             (or (equal major-mode 'vterm-mode)
                                 (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                      (display-buffer-reuse-window display-buffer-at-bottom)
                      ;;(display-buffer-reuse-window display-buffer-in-direction)
                      ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                      ;;(direction . bottom)
                      ;;(dedicated . t) ;dedicated is supported in emacs27
                      (reusable-frames . visible)
                      (window-height . 0.3)))
      :bind
      ("C-c w t v" . vterm-toggle))

    ;; Sudo Edit
  ;;sudo-edit gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.
  ;; Install and configure sudo-edit package
  (use-package sudo-edit
    :ensure t
    :bind
    (("C-c f u" . sudo-edit-find-file)
     ("C-c f U" . sudo-edit)))

  ;; Add which-key support for these bindings
  (with-eval-after-load 'which-key
    (which-key-add-key-based-replacements
      "C-c f u" "Sudo find file"
      "C-c f U" "Sudo edit file"))

  ;; Add god-mode support if needed
  (with-eval-after-load 'god-mode
    (which-key-add-key-based-replacements
      "c f u" "Sudo find file"
      "c f U" "Sudo edit file"))

  ;;; ESHELL
(use-package eshell
  :ensure nil
  :defer t
  :config
  (defun emacs-solo/eshell-pick-history ()
    "Show Eshell history in a completing-read picker and insert the selected command."
    (interactive)
    (let* ((history-file (expand-file-name "eshell/history" user-emacs-directory))
           (history-entries (when (file-exists-p history-file)
                              (with-temp-buffer
                                (insert-file-contents history-file)
                                (split-string (buffer-string) "\n" t))))
           (selection (completing-read "Eshell History: " history-entries)))
      (when selection
        (insert selection))))


  (defun eshell/cat-with-syntax-highlighting (filename)
    "Like cat(1) but with syntax highlighting.
  Stole from aweshell"
    (let ((existing-buffer (get-file-buffer filename))
          (buffer (find-file-noselect filename)))
      (eshell-print
       (with-current-buffer buffer
         (if (fboundp 'font-lock-ensure)
             (font-lock-ensure)
           (with-no-warnings
             (font-lock-fontify-buffer)))
         (let ((contents (buffer-string)))
           (remove-text-properties 0 (length contents) '(read-only nil) contents)
           contents)))
      (unless existing-buffer
        (kill-buffer buffer))
      nil))
  (advice-add 'eshell/cat :override #'eshell/cat-with-syntax-highlighting)


  (add-hook 'eshell-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c l") #'emacs-solo/eshell-pick-history)
              (local-set-key (kbd "C-l")
                             (lambda ()
                               (interactive)
                               (eshell/clear 1)
                               (eshell-send-input)))))

  (require 'vc)
  (require 'vc-git)
  (setopt eshell-prompt-function
        (lambda ()
          (concat
           "┌─("
           (if (> eshell-last-command-status 0)
               "❌"
             "🐂")
           " " (number-to-string eshell-last-command-status)
           ")──("
           "🧘 " (or (file-remote-p default-directory 'user) (user-login-name))
           ")──("
           "💻 " (or (file-remote-p default-directory 'host) (system-name))
           ")──("
           "🕝 " (format-time-string "%H:%M:%S" (current-time))
           ")──("
           "📁 "
           (concat (if (>= (length (eshell/pwd)) 40)
                       (concat "..." (car (last (butlast (split-string (eshell/pwd) "/") 0))))
                     (abbreviate-file-name (eshell/pwd))))
           ")\n"

           (when (and (fboundp 'vc-git-root) (vc-git-root default-directory))
             (concat
              "├─(🌿 " (car (vc-git-branches))
              (let* ((branch (car (vc-git-branches)))
                     (behind (string-to-number
                              (shell-command-to-string
                               (concat "git rev-list --count HEAD..origin/" branch)))))
                (if (> behind 0)
                    (concat "  ⬇️ " (number-to-string behind))))

              (let ((modified (length (split-string
                                       (shell-command-to-string
                                        "git ls-files --modified") "\n" t)))
                    (untracked (length (split-string
                                        (shell-command-to-string
                                         "git ls-files --others --exclude-standard") "\n" t))))
                (concat
                 (if (> modified 0)
                     (concat "  ✏️ " (number-to-string modified)))
                 (if (> untracked 0)
                     (concat "  📄 " ))))
              ")\n"))
           "└─➜ ")))

  (setq eshell-prompt-regexp "└─➜ ")

  (add-hook 'eshell-mode-hook (lambda () (setenv "TERM" "xterm-256color")))

  (setq eshell-visual-commands
        '("vi" "screen" "top"  "htop" "btm" "less" "more" "lynx" "ncftp" "pine" "tin" "trn"
          "elm" "irssi" "nmtui-connect" "nethack" "vim" "alsamixer" "nvim" "w3m"
          "ncmpcpp" "newsbeuter" "nethack" "mutt")))



    (provide 'shell)
#+end_src

;;; EMMS - Emacs Multimedia System
(use-package emms
  :ensure t
  :init
  (require 'emms-setup)
  (emms-all)
  (require 'emms-player-mplayer)
  :config
  ;; Define the prefix keymap before using it
  (define-prefix-command 'my-emms-map)
  (global-set-key (kbd "C-c m") 'my-emms-map)

  ;; Use mkv/mplayer as the default player
  (setq emms-player-list '(emms-player-mplayer)
        emms-player-mplayer-command-name "mkv" ;; change to "mplayer" if mkv fails
        emms-source-file-default-directory "~/Music/")

  ;; Optional: recursively add all audio/video in ~/Music
  (setq emms-source-file-directory-tree-function
        'emms-source-file-directory-tree-find)

  ;; Keybindings
  (define-key my-emms-map (kbd "f") 'emms-play-find)
  (define-key my-emms-map (kbd "d") 'emms-play-directory-tree)
  (define-key my-emms-map (kbd "s") 'emms-stop)
  (define-key my-emms-map (kbd "p") 'emms-pause)
  (define-key my-emms-map (kbd "n") 'emms-next)
  (define-key my-emms-map (kbd "b") 'emms-previous)
  (define-key my-emms-map (kbd "+") (lambda () (interactive) (emms-seek +10)))
  (define-key my-emms-map (kbd "-") (lambda () (interactive) (emms-seek -10)))

  ;; Playback speed control
  (define-key my-emms-map (kbd "<") (lambda () (interactive)
                                      (emms-player-mplayer-command "speed_mult 0.9")))
  (define-key my-emms-map (kbd ">") (lambda () (interactive)
                                      (emms-player-mplayer-command "speed_mult 1.1")))

  ;; Add which-key labels
  (with-eval-after-load 'which-key
    (which-key-add-key-based-replacements
      "C-c m" "Multimedia"
      "C-c m f" "Find file"
      "C-c m d" "Play dir"
      "C-c m s" "Stop"
      "C-c m p" "Pause"
      "C-c m n" "Next"
      "C-c m b" "Back"
      "C-c m +" "Seek +10s"
      "C-c m -" "Seek -10s"
      "C-c m <" "Slower"
      "C-c m >" "Faster")))


;; Mode line height and minibuffer padding
(set-face-attribute 'mode-line nil :height 120)
(set-face-attribute 'mode-line-inactive nil :height 110)

(setq max-mini-window-height 0.33)
(setq resize-mini-windows t)

(set-window-margins (minibuffer-window) 0 1)


;; Enable precise pixel-based resizing to prevent clipping in GUI
(setq window-resize-pixelwise t)
(setq frame-resize-pixelwise t)


;; Explicitly increase frame height to help ensure minibuffer visibility
(add-to-list 'default-frame-alist '(height . 50))


;; Adjust minibuffer behavior to allow more space
(setq max-mini-window-height 0.5)
(setq resize-mini-windows t)
(setq minibuffer-depth-indicate-mode t)
